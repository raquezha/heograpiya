// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: rootProject.file('dependencies.gradle')

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.0-alpha02'
        //noinspection DifferentKotlinGradleVersion
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0'
        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'nl.neotech.plugin:android-root-coverage-plugin:1.4.0'
        classpath 'io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.17.0-RC3'
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:10.0.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "nl.neotech.plugin.rootcoverage" version "1.4.0"
}


allprojects {
    jacoco {
        toolVersion = "0.8.7"
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "io.gitlab.arturbosch.detekt"

    ktlint {
        android.set(true)
        outputColorName.set("RED")
    }

    detekt {
        config = files("${rootDir}/detekt.yml")
        baseline = file("${rootDir}/detekt-baseline.xml")
        parallel = true
    }

    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdk 30
                buildToolsVersion "30.0.3"

                defaultConfig {
                    minSdk 26
                    targetSdk 30
                    versionCode 1
                    versionName "1.0"

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }

                buildTypes {
                    release {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }

                    debug {
                        testCoverageEnabled true
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                kotlinOptions {
                    jvmTarget = '1.8'
                }

                buildFeatures {
                    viewBinding true
                    dataBinding true
                }

                sourceSets {
                    main {
                        java.srcDirs = ['src/main/kotlin']
                    }
                    androidTest {
                        java.srcDirs = ['src/androidTest/kotlin']
                    }
                    test {
                        java.srcDirs = ['src/test/kotlin']
                    }
                }
            }
        }
    }
}


apply plugin: 'nl.neotech.plugin.rootcoverage'

task clean(type: Delete) {
    delete rootProject.buildDir
}